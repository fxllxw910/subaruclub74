# -*- coding: utf-8 -*-
import random
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

BOT_TOKEN = os.environ['BOT_TOKEN']

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class UserState(StatesGroup):
    waiting_for_captcha = State()

RULES_TEXT = """–í –Ω–∞—à–µ–π —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–µ 11 —á–∞—Ç–æ–≤, –≤ –∫–∞–∂–¥–æ–º —á–∞—Ç–µ —Å–≤–æ—è —Ç–µ–º–∞—Ç–∏–∫–∞:
‚Ä¢ –û–±—â–∏–π —á–∞—Ç –°—É–±–∞—Ä–∏—Å—Ç–æ–≤ ‚Äì –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –Ω–æ–≤–∏—á–∫–æ–≤ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ, –æ–±—â–µ–Ω–∏–µ –æ–±–æ –≤—Å—ë–º.
‚Ä¢ –ê–≤—Ç–æ—Å–ø–æ—Ä—Ç ‚Äì –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –∏ —Å–æ–±—ã—Ç–∏—è—Ö –∞–≤—Ç–æ—Å–ø–æ—Ä—Ç–∞, –æ–±—â–µ–Ω–∏–µ –Ω–∞ —ç—Ç—É —Ç–µ–º—É.    
‚Ä¢ –û—Ç–¥—ã—Ö ‚Äì –≤—Å—ë —á—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –æ—Ç–¥—ã—Ö–æ–º: –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, —Å–ø–ª–∞–≤—ã, –ø–æ—Ö–æ–¥—ã, —Ä—ã–±–∞–ª–∫–∞, –ø—Ä–æ–±–µ–∂–∫–∏.
‚Ä¢ –ú—É–∂—Å–∫–æ–µ –∏ –∂–µ–Ω—Å–∫–æ–µ ‚Äì –≤–µ—Ç–∫–∞ –±–µ–∑—É–¥–µ—Ä–∂–Ω–æ–≥–æ —Ñ–ª—É–¥–∞ (–º–∞—Ç —á—É—Ç—å-—á—É—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω).
‚Ä¢ –ö–æ–º–Ω–∞—Ç–∞ –ø–ª–∞—á–∞ (–∂–∞–ª–æ–± –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π) ‚Äì –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ–≤–æ—Ä–∏—Ç —Å–∞–º–æ –∑–∞ —Å–µ–±—è, –ø—Ä–µ–¥–ª–∞–≥–∞–π—Ç–µ, –∂–∞–ª—É–π—Ç–µ—Å—å.

–ù–∏–∂–µ —á–∞—Ç—ã –±–µ–∑ —Ñ–ª—É–¥–∞ (–≤ —ç—Ç–∏—Ö —á–∞—Ç–∞—Ö –∑–∞ –§–ª—É–¥ —Å—Ä–∞–∑—É –±–∞–Ω, –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –Ω–∞ —Å—É—Ç–∫–∏, –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞ –Ω–µ–¥–µ–ª—é) 
‚Ä¢ –ì–∞—Ä–∞–∂ ‚Äì —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —á–∞—Ç, –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã, –≤–∑–∞–∏–º–æ–ø–æ–º–æ—â—å (–±–µ–∑ —Ñ–ª—É–¥–∞). 
‚Ä¢ –ù–∞—à–∏ –º–∞—à–∏–Ω—ã ‚Äì —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞—à–∏—Ö –º–∞—à–∏–Ω (–±–µ–∑ —Ñ–ª—É–¥–∞).
‚Ä¢ –ù–∞—à–∏ –¥—Ä—É–∑—å—è ‚Äì —Å—Å—ã–ª–∫–∏ –Ω–∞ –°—É–±–∞—Ä—É –∫–ª—É–±—ã –≤ –¥—Ä—É–≥–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö.
‚Ä¢ –ë–∞—Ä–∞—Ö–æ–ª–∫–∞ ‚Äì –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ –∫—É–ø–ª–∏/–ø—Ä–æ–¥–∞–∂–µ (–±–µ–∑ —Ñ–ª—É–¥–∞, –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –ª–∏—á–∫—É –∏–ª–∏ –≤ –ì–∞—Ä–∞–∂).
‚Ä¢ SOS ‚Äì —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Å—Ç—Ä–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–º–æ—â–∏ –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å, —Ç–∞–∫ –∫–∞–∫ —É –≤—Å–µ—Ö –Ω–∞ —ç—Ç—É –≤–µ—Ç–∫—É –≤–∫–ª—é—á–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –≤–æ–ø—Ä–æ—Å—ã –≤ –ª–∏—á–∫—É –∏–ª–∏ –≤ –æ–±—â–∏–π —á–∞—Ç. –ï—Å–ª–∏ –í—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–∏–π—Ç–∏ –Ω–∞ –ø–æ–º–æ—â—å, –≤ —ç—Ç–æ–º —á–∞—Ç–µ –≤–∫–ª—é—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. (–ë–µ–∑ —Ñ–ª—É–¥–∞). 
‚Ä¢ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∫–ª—É–±–∞ - –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ —Å—Ö–æ–¥–∫–∞—Ö, –ø–æ–µ–∑–¥–∫–∞—Ö –∏ —Ç.–¥
‚Ä¢ –ù–∞—à–∏ –ø–∞—Ä—Ç–Ω—ë—Ä—ã –∫–ª—É–±–∞ ‚Äì –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ –æ–¥–Ω–æ–∫–ª—É–±–Ω–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≥–æ—Ç–æ–≤—ã —Å–¥–µ–ª–∞—Ç—å —Å–∫–∏–¥–∫—É –æ–¥–Ω–æ–∫–ª—É–±–Ω–∏–∫–∞–º. 
‚Ä¢ Subaru 74 —Ä–µ–≥–∏–æ–Ω - –∫–ª—É–±—ã –ø–æ –≥–æ—Ä–æ–¥–∞–º –∏–ª–∏ –ø–æ –º–∞—Ä–∫–∞–º –≤ 74 —Ä–µ–≥–∏–æ–Ω–µ

–í –Ω–∞—à–∏—Ö —á–∞—Ç–∞—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–µ—â–∞–µ—Ç—Å—è: 
‚Ä¢ –ú–∞—Ç!
‚Ä¢ –†–∞–∑–∂–∏–≥–∞–Ω–∏–µ –º–µ–∂–Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ä–æ–∑–Ω–∏
‚Ä¢ –û—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
‚Ä¢ –ì—Ä—É–±–∞—è –ª–µ–∫—Å–∏–∫–∞
‚Ä¢ –°—Ç–∏–∫–µ—Ä—ã –ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
‚Ä¢ –†–∞–∑–ª–∏—á–Ω–æ–≥–æ —Ä–æ–¥–∞ —Ä–µ–∫–ª–∞–º–∞, –±–µ–∑ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è —Å –∞–¥–º–∏–Ω–∞–º–∏
‚Ä¢ –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –º–æ–ª—á–∞–Ω–∏–µ –≤ —á–∞—Ç–µ. 

–ü–æ—Å–ª–µ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è - —É–¥–∞–ª–µ–Ω–∏–µ –≤ –±–∞–Ω. –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –í–∞—à–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –≤ —Ä–∞–º–∫–∞—Ö —á–∞—Ç–∞ –±—É–¥–µ—Ç –Ω–∞—Ä—É—à–∞—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø—ã –æ–±—â–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç—ã–µ –≤ –Ω–∞—à–µ–º –∫–ª—É–±–µ, –í–∞–º –±—É–¥–µ—Ç –≤—ã–Ω–µ—Å–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞. –í —Å–ª—É—á–∞–µ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –±—É–¥–µ—Ç –∑–∞–±–∞–Ω–µ–Ω–∞.

–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —á–∞—Ç–∞ –º–æ–∂–µ—Ç –∑–∞–±–∞–Ω–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω.

–í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤ —á–∞—Ç–µ SOS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –æ—Ç–∫–ª—é—á–∞—Ç—å.

–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç—Å—è: –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ, —é–º–æ—Ä, –∂–µ–ª–∞–Ω–∏–µ –ø–æ–º–æ—á—å –±–ª–∏–∂–Ω–µ–º—É –∏ –ø—Ä–æ—á–∏–µ –ø—Ä–∏—è—Ç–Ω–æ—Å—Ç–∏."""

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state):
    await state.clear()
    user_name = message.from_user.first_name
    text = f"–ü—Ä–∏–≤–µ—Ç, {user_name} üëã\n–≠—Ç–æ –±–æ—Ç –¥–ª—è –≤—Ö–æ–¥–∞ –≤ Subaru Club 74 ‚ú®"
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Ö–æ–¥", callback_data="apply")]
        ]
    )
    await message.answer(text=text, reply_markup=keyboard)

@dp.callback_query(F.data == "apply")
async def process_apply(callback_query: types.CallbackQuery, state):
    await state.clear()
    await callback_query.message.answer(RULES_TEXT)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–° –ø—Ä–∞–≤–∏–ª–∞–º–∏ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω –∏ —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="rules_confirmed")]
        ]
    )
    await callback_query.answer()
    await callback_query.message.edit_reply_markup(reply_markup=keyboard)

@dp.callback_query(F.data == "rules_confirmed")
async def process_rules_confirmed(callback_query: types.CallbackQuery, state):
    await callback_query.answer()
    emojis = ['üåö', 'üåù', '‚≠êÔ∏è', 'üåç', 'üåû']
    random.shuffle(emojis)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=emoji, callback_data=f"captcha_{emoji}")]
            for emoji in emojis
        ]
    )
    await callback_query.message.edit_text("–ù–∞–π–¥–∏ –∑–µ–º–ª—é", reply_markup=keyboard)
    await state.set_state(UserState.waiting_for_captcha)

@dp.callback_query(F.data.startswith("captcha_"), UserState.waiting_for_captcha)
async def process_captcha(callback_query: types.CallbackQuery, state):
    chosen_emoji = callback_query.data.split("captcha_")[1]
    await callback_query.answer()

    if chosen_emoji in ['üåö', 'üåù', '‚≠êÔ∏è', 'üåû']:
        user_name = callback_query.from_user.first_name
        text = f"–ü—Ä–∏–≤–µ—Ç, {user_name} üëã\n–≠—Ç–æ –±–æ—Ç –¥–ª—è –≤—Ö–æ–¥–∞ –≤ Subaru Club 74 ‚ú®"
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Ö–æ–¥", callback_data="apply")]
            ]
        )
        await callback_query.message.edit_text(text=text, reply_markup=keyboard)
        await state.clear()
    elif chosen_emoji == 'üåç':
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–ª—É–±", url="https://t.me/+nnwxw00kXDkwMTgy")]
            ]
        )
        await callback_query.message.edit_text("–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É", reply_markup=keyboard)
        await state.clear()

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())
